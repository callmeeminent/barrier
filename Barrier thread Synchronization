#include<pthread.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
int nos_threads;
int c=0;
int t; // allocating threshold time for each thread
pthread_barrier_t barrier;
//void* thread_execute(void* id);
void* barrier_point(void* id);
/*void* compute(void* idp);
void* compute(void* idp)    // function for each thread
{
	int id=*(int*)idp;  
	thread_execute(void* id);    // for thread id
	barrier_point(void* id);		// calling barrier point function to check if the thread is still left to reach the barrier
	}
void* thread_execute(void* id)   // lettting the thread do some work 
{
	printf("the thread with id %d is executing \n",id);
	sleep(id);    //lapsing the executing time for thread to get executed
	} */

void* barrier_point(void* id)
{ 

int t_id=*(int*)id;
printf("THREAD %d 			 %d sec\n",t_id+1,t);
sleep(t);
printf("THREAD id %d Ready \n",t_id+1);

pthread_barrier_wait(&barrier);
printf("THREAD %d   Released \n",t_id+1);
c++;

return NULL;
/*pthread_mutex_t condition_mutex;
 pthread_mutex_lock(&condition_mutex);
  counter++;
  if (counter == num_threads) {
    counter = 0;
    status=pthread_cond_broadcast(&condition);
  } 
 
  if(status!=0)
  {
  	return status;
	}
  status=pthread_cond_wait(&condition, &condition_mutex);  
  
	if(status!=0)
	{
	return status;
	}
	
  pthread_mutex_unlock(&condition_mutex); /* unlock the condition mutex */
   //printf("thread with id %d is done executing \n",id); */
}
int main()
{
	int i;
	printf("Pass the thread to be executed \n");
	scanf("%d",&nos_threads);
	printf("Pass the threashold time for each thread \n");
	scanf("%d",&t);
	pthread_t threads[nos_threads];
    int ids[nos_threads];
    srand(time(1));
    pthread_barrier_init(&barrier, NULL, nos_threads + 1);
    for (i = 0; i < nos_threads; i++) {
    ids[i] = i;
    pthread_create(&threads[i], NULL, barrier_point , &ids[i]);
}
	printf("=================================\n");
	printf("THREAD ID:			WAITING TIME \n");
	pthread_barrier_wait(&barrier);
	
    for (i = 0; i < nos_threads; i++) {
    pthread_join(threads[i], NULL);
  }
  if (c==nos_threads)
{
	printf("All threads released successfully and  0\n");
}
else 
{
	printf("-1");
}
  
  return 0;
  }
